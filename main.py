import streamlit as st
import pandas as pd
from data_processor import process_text_file
from storage import Storage
import io
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Set page configuration
st.set_page_config(
    page_title="ржмрж╛ржВрж▓рж╛ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ",
    page_icon="ЁЯУЭ",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
        border-radius: 5px;
        height: 3em;
        background-color: #f63366;
        color: white;
    }
    .stTextInput>div>div>input {
        border-radius: 5px;
        font-family: 'SolaimanLipi', Arial, sans-serif !important;
    }
    h1 {
        color: #1E1E1E;
        padding-bottom: 2rem;
    }
    h2 {
        color: #2E2E2E;
        padding-bottom: 1rem;
    }
    .stProgress > div > div > div > div {
        background-color: #f63366;
    }
    .upload-stats {
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .delete-button {
        background-color: #dc3545;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }
    .edit-button {
        background-color: #28a745;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }
</style>
""", unsafe_allow_html=True)

# Add Bangla font support
st.markdown("""
<style>
@font-face {
    font-family: 'SolaimanLipi';
    src: url('https://cdn.jsdelivr.net/gh/maateen/bangla-web-fonts/fonts/SolaimanLipi/SolaimanLipi.ttf') format('truetype');
}
* {
    font-family: 'SolaimanLipi', Arial, sans-serif !important;
}
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'storage' not in st.session_state:
    st.session_state.storage = Storage()

def edit_record(record_id, record_data):
    """Edit record dialog"""
    with st.form(key=f'edit_form_{record_id}'):
        st.subheader("ЁЯУЭ рж░рзЗржХрж░рзНржб рж╕ржорзНржкрж╛ржжржирж╛")
        edited_data = {}

        edited_data['ржХрзНрж░ржорж┐ржХ_ржиржВ'] = st.text_input("ржХрзНрж░ржорж┐ржХ ржиржВ", value=record_data['ржХрзНрж░ржорж┐ржХ_ржиржВ'])
        edited_data['ржирж╛ржо'] = st.text_input("ржирж╛ржо", value=record_data['ржирж╛ржо'])
        edited_data['ржнрзЛржЯрж╛рж░_ржиржВ'] = st.text_input("ржнрзЛржЯрж╛рж░ ржиржВ", value=record_data['ржнрзЛржЯрж╛рж░_ржиржВ'])
        edited_data['ржкрж┐рждрж╛рж░_ржирж╛ржо'] = st.text_input("ржкрж┐рждрж╛рж░ ржирж╛ржо", value=record_data['ржкрж┐рждрж╛рж░_ржирж╛ржо'])
        edited_data['ржорж╛рждрж╛рж░_ржирж╛ржо'] = st.text_input("ржорж╛рждрж╛рж░ ржирж╛ржо", value=record_data['ржорж╛рждрж╛рж░_ржирж╛ржо'])
        edited_data['ржкрзЗрж╢рж╛'] = st.text_input("ржкрзЗрж╢рж╛", value=record_data['ржкрзЗрж╢рж╛'])
        edited_data['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ'] = st.text_input("ржЬржирзНржо рждрж╛рж░рж┐ржЦ", value=record_data['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ'])
        edited_data['ржарж┐ржХрж╛ржирж╛'] = st.text_input("ржарж┐ржХрж╛ржирж╛", value=record_data['ржарж┐ржХрж╛ржирж╛'])

        submit = st.form_submit_button("ЁЯТ╛ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи")
        if submit:
            if st.session_state.storage.update_record(record_id, edited_data):
                st.success("тЬЕ рж░рзЗржХрж░рзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
                return True
            else:
                st.error("тЭМ рж░рзЗржХрж░рзНржб ржЖржкржбрзЗржЯ ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐")
    return False

def main():
    st.title("ЁЯУЪ ржмрж╛ржВрж▓рж╛ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи")

    # Sidebar navigation with icons
    page = st.sidebar.radio(
        "ЁЯУС ржкрзГрж╖рзНржарж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        ["ЁЯУд ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб", "ЁЯФН ржЕржирзБрж╕ржирзНржзрж╛ржи", "ЁЯУЛ рж╕ржХрж▓ рждржерзНржп"]
    )

    if "ЁЯУд ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб" in page:
        show_upload_page()
    elif "ЁЯФН ржЕржирзБрж╕ржирзНржзрж╛ржи" in page:
        show_search_page()
    else:
        show_all_data_page()

def show_upload_page():
    st.header("ЁЯУд ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб")

    # Add description
    st.markdown("""
    #### ржмрзНржпржмрж╣рж╛рж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛:
    1. ржПржХрж╛ржзрж┐ржХ ржЯрзЗржХрзНрж╕ржЯ ржлрж╛ржЗрж▓ ржПржХрж╕рж╛ржерзЗ ржЖржкрж▓рзЛржб ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи
    2. ржкрзНрж░рждрж┐ржЯрж┐ ржлрж╛ржЗрж▓ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг ржХрж░рж╛ рж╣ржмрзЗ
    3. ржбрзЗржЯрж╛ рж╕рзБрж░ржХрзНрж╖рж┐рждржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржмрзЗ
    """)

    uploaded_files = st.file_uploader(
        "ржЯрзЗржХрзНрж╕ржЯ ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        type=['txt'],
        accept_multiple_files=True
    )

    if uploaded_files:
        total_records = 0
        for uploaded_file in uploaded_files:
            with st.spinner(f'"{uploaded_file.name}" ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг ржЪрж▓ржЫрзЗ...'):
                try:
                    # Add a progress bar
                    progress_bar = st.progress(0)

                    # Read file content
                    content = uploaded_file.read().decode('utf-8')
                    progress_bar.progress(25)

                    # Process records
                    records = process_text_file(content)
                    progress_bar.progress(50)

                    if not records:
                        st.warning(f"тЪая╕П '{uploaded_file.name}' ржерзЗржХрзЗ ржХрзЛржи рж░рзЗржХрж░рзНржб ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
                        continue

                    # Save to database
                    st.session_state.storage.add_file_data(uploaded_file.name, records)
                    progress_bar.progress(100)

                    # Show success message with record count
                    total_records += len(records)
                    st.success(f"тЬЕ '{uploaded_file.name}' рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкрж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ ({len(records)}ржЯрж┐ рж░рзЗржХрж░рзНржб)")

                    # Show sample of processed data
                    if len(records) > 0:
                        st.markdown("##### ржиржорзБржирж╛ ржбрзЗржЯрж╛:")
                        sample_df = pd.DataFrame([records[0]])
                        st.dataframe(sample_df, use_container_width=True)

                    # Show detailed stats
                    st.markdown(f"""
                    <div class="upload-stats">
                        ЁЯУК <b>ржлрж╛ржЗрж▓ рждржерзНржп:</b><br>
                        - ржорзЛржЯ рж░рзЗржХрж░рзНржб: {len(records)}<br>
                        - ржлрж╛ржЗрж▓ ржирж╛ржо: {uploaded_file.name}<br>
                        - ржлрж╛ржЗрж▓ рж╕рж╛ржЗржЬ: {round(len(content)/1024, 2)} KB
                    </div>
                    """, unsafe_allow_html=True)

                except Exception as e:
                    st.error(f"тЭМ ржлрж╛ржЗрж▓ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗ рж╕ржорж╕рзНржпрж╛: {str(e)}")
                    logger.error(f"Error processing file {uploaded_file.name}: {str(e)}")
                finally:
                    # Clean up progress bar
                    if 'progress_bar' in locals():
                        progress_bar.empty()

        if total_records > 0:
            st.info(f"ЁЯУИ рж╕рж░рзНржмржорзЛржЯ {total_records}ржЯрж┐ рж░рзЗржХрж░рзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкрж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ")

def show_search_page():
    st.header("ЁЯФН ржЙржирзНржиржд ржЕржирзБрж╕ржирзНржзрж╛ржи")

    # Create two columns for search fields
    col1, col2 = st.columns(2)

    with col1:
        si_number = st.text_input("ЁЯФв ржХрзНрж░ржорж┐ржХ ржиржВ")
        name = st.text_input("ЁЯСд ржирж╛ржо")
        father_name = st.text_input("ЁЯСи ржкрж┐рждрж╛рж░ ржирж╛ржо")
        mother_name = st.text_input("ЁЯСй ржорж╛рждрж╛рж░ ржирж╛ржо")

    with col2:
        occupation = st.text_input("ЁЯТ╝ ржкрзЗрж╢рж╛")
        address = st.text_input("ЁЯПа ржарж┐ржХрж╛ржирж╛")
        dob = st.text_input("ЁЯУЕ ржЬржирзНржо рждрж╛рж░рж┐ржЦ")

    col1, col2 = st.columns(2)

    with col1:
        if st.button("ЁЯФН ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи", key="search"):
            with st.spinner('ржЕржирзБрж╕ржирзНржзрж╛ржи ржЪрж▓ржЫрзЗ...'):
                results = st.session_state.storage.search_records(
                    ржХрзНрж░ржорж┐ржХ_ржиржВ=si_number,
                    ржирж╛ржо=name,
                    ржкрж┐рждрж╛рж░_ржирж╛ржо=father_name,
                    ржорж╛рждрж╛рж░_ржирж╛ржо=mother_name,
                    ржкрзЗрж╢рж╛=occupation,
                    ржарж┐ржХрж╛ржирж╛=address,
                    ржЬржирзНржо_рждрж╛рж░рж┐ржЦ=dob
                )

                if results:
                    st.write(f"ЁЯУК ржорзЛржЯ {len(results)} ржЯрж┐ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ:")

                    # Show results with edit and delete buttons
                    for record in results:
                        record_id = record.pop('id')  # Remove id from display but keep for operations

                        # Create columns for record and buttons
                        record_col, edit_col, delete_col = st.columns([6, 1, 1])

                        with record_col:
                            st.write(record)

                        with edit_col:
                            if st.button("тЬПя╕П рж╕ржорзНржкрж╛ржжржирж╛", key=f"edit_{record_id}"):
                                if edit_record(record_id, record):
                                    st.experimental_rerun()

                        with delete_col:
                            if st.button("ЁЯЧСя╕П ржорзБржЫрзБржи", key=f"delete_{record_id}"):
                                if st.session_state.storage.delete_record(record_id):
                                    st.success("тЬЕ рж░рзЗржХрж░рзНржб ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
                                    st.experimental_rerun()
                                else:
                                    st.error("тЭМ рж░рзЗржХрж░рзНржб ржорзБржЫрзЗ ржлрзЗрж▓рж╛ ржпрж╛ржпрж╝ржирж┐")
                else:
                    st.info("тЭМ ржХрзЛржи ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")

def show_all_data_page():
    st.header("ЁЯУЛ рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╕ржХрж▓ рждржерзНржп")

    # Add delete all button
    if st.button("ЁЯЧСя╕П рж╕ржм ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи", key="delete_all"):
        if st.checkbox("ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд?"):
            st.session_state.storage.delete_all_records()
            st.success("тЬЕ рж╕ржм ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
            st.experimental_rerun()

    files = st.session_state.storage.get_file_names()

    if not files:
        st.info("тЭМ ржХрзЛржи ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣ржпрж╝ржирж┐")
        return

    selected_file = st.selectbox("ЁЯУБ ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи", files)

    if selected_file:
        with st.spinner('рждржерзНржп рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...'):
            records = st.session_state.storage.get_file_data(selected_file)
            if records:
                df = pd.DataFrame(records)
                st.dataframe(df, use_container_width=True)
            else:
                st.info("тЭМ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржлрж╛ржЗрж▓рзЗ ржХрзЛржи рждржерзНржп ржирзЗржЗ")

if __name__ == "__main__":
    main()