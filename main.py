import streamlit as st
import pandas as pd
from data_processor import process_text_file
from storage import Storage
import io
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize session state for file upload
if 'upload_state' not in st.session_state:
    st.session_state.upload_state = {
        'processing': False,
        'current_file': None,
        'error': None
    }

def process_uploaded_file(uploaded_file):
    """Process a single uploaded file with proper error handling"""
    try:
        if uploaded_file.size > 200 * 1024 * 1024:  # 200MB limit
            return None, "ржлрж╛ржЗрж▓рзЗрж░ рж╕рж╛ржЗржЬ 200MB ржПрж░ ржмрзЗрж╢рж┐ рж╣рждрзЗ ржкрж╛рж░ржмрзЗ ржирж╛"

        # Read file content with explicit encoding and error handling
        try:
            content = uploaded_file.getvalue().decode('utf-8-sig', errors='replace')
        except UnicodeDecodeError:
            return None, "ржлрж╛ржЗрж▓ржЯрж┐ рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯрзЗ ржирзЗржЗред ржжржпрж╝рж╛ ржХрж░рзЗ UTF-8 ржПржиржХрзЛржбрж┐ржВ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"

        # Process the content
        records = process_text_file(content)

        if not records:
            return None, "ржХрзЛржи рж░рзЗржХрж░рзНржб ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐"

        return records, None
    except Exception as e:
        logger.error(f"Error processing file {uploaded_file.name}: {str(e)}")
        return None, f"ржлрж╛ржЗрж▓ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржгрзЗ рж╕ржорж╕рзНржпрж╛: {str(e)}"

def show_upload_page():
    st.header("ЁЯУд ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб")

    # Add description with clear file requirements
    st.markdown("""
    #### ржмрзНржпржмрж╣рж╛рж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛:
    1. ржПржХрж╛ржзрж┐ржХ ржЯрзЗржХрзНрж╕ржЯ ржлрж╛ржЗрж▓ ржПржХрж╕рж╛ржерзЗ ржЖржкрж▓рзЛржб ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи
    2. ржкрзНрж░рждрж┐ржЯрж┐ ржлрж╛ржЗрж▓ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг ржХрж░рж╛ рж╣ржмрзЗ
    3. ржбрзЗржЯрж╛ рж╕рзБрж░ржХрзНрж╖рж┐рждржнрж╛ржмрзЗ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржмрзЗ

    **рж╕рзАржорж╛ржмржжрзНржзрждрж╛:**
    - рж╕рж░рзНржмрзЛржЪрзНржЪ ржлрж╛ржЗрж▓ рж╕рж╛ржЗржЬ: 200MB
    - рж╢рзБржзрзБржорж╛рждрзНрж░ .txt ржлрж╛ржЗрж▓ рж╕ржорж░рзНржерж┐ржд
    - ржлрж╛ржЗрж▓ ржПржиржХрзЛржбрж┐ржВ: UTF-8
    """)

    # Initialize upload states if not exists
    if 'processed_files' not in st.session_state:
        st.session_state.processed_files = set()

    try:
        uploaded_files = st.file_uploader(
            "ржЯрзЗржХрзНрж╕ржЯ ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
            type=['txt'],
            accept_multiple_files=True,
            key="file_uploader",
            help="ржПржХрж╛ржзрж┐ржХ ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рждрзЗ Ctrl/Cmd ржЪрзЗржкрзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи"
        )

        if uploaded_files:
            total_records = 0
            for uploaded_file in uploaded_files:
                if uploaded_file.name in st.session_state.processed_files:
                    continue

                with st.spinner(f'"{uploaded_file.name}" ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ржХрж░ржг ржЪрж▓ржЫрзЗ...'):
                    records, error = process_uploaded_file(uploaded_file)

                    if error:
                        st.error(f"тЭМ '{uploaded_file.name}': {error}")
                        continue

                    try:
                        # Save to database
                        st.session_state.storage.add_file_data(uploaded_file.name, records)

                        # Update success status
                        total_records += len(records)
                        st.success(f"тЬЕ '{uploaded_file.name}' рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкрж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ ({len(records)}ржЯрж┐ рж░рзЗржХрж░рзНржб)")

                        # Show sample data
                        st.markdown("##### ржиржорзБржирж╛ ржбрзЗржЯрж╛:")
                        sample_df = pd.DataFrame([records[0]])
                        st.dataframe(sample_df, use_container_width=True)

                        # Mark as processed
                        st.session_state.processed_files.add(uploaded_file.name)
                    except Exception as e:
                        logger.error(f"Error saving file {uploaded_file.name}: {str(e)}")
                        st.error(f"тЭМ ржбрзЗржЯрж╛ рж╕ржВрж░ржХрзНрж╖ржгрзЗ рж╕ржорж╕рзНржпрж╛: {str(e)}")

            if total_records > 0:
                st.info(f"ЁЯУИ рж╕рж░рзНржмржорзЛржЯ {total_records}ржЯрж┐ рж░рзЗржХрж░рзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкрж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ")

    except Exception as e:
        st.error(f"тЭМ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рж╕ржорж╕рзНржпрж╛: {str(e)}")
        logger.error(f"Unexpected error in file upload: {str(e)}")

def edit_record(record_id, record_data):
    """Edit record dialog"""
    st.markdown("<div class='edit-form'>", unsafe_allow_html=True)
    with st.form(key=f'edit_form_{record_id}'):
        st.subheader("ЁЯУЭ рж░рзЗржХрж░рзНржб рж╕ржорзНржкрж╛ржжржирж╛")
        edited_data = {}

        # Create two columns for the form
        col1, col2 = st.columns(2)

        with col1:
            edited_data['ржХрзНрж░ржорж┐ржХ_ржиржВ'] = st.text_input("ржХрзНрж░ржорж┐ржХ ржиржВ", value=record_data['ржХрзНрж░ржорж┐ржХ_ржиржВ'])
            edited_data['ржирж╛ржо'] = st.text_input("ржирж╛ржо", value=record_data['ржирж╛ржо'])
            edited_data['ржнрзЛржЯрж╛рж░_ржиржВ'] = st.text_input("ржнрзЛржЯрж╛рж░ ржиржВ", value=record_data['ржнрзЛржЯрж╛рж░_ржиржВ'])
            edited_data['ржкрж┐рждрж╛рж░_ржирж╛ржо'] = st.text_input("ржкрж┐рждрж╛рж░ ржирж╛ржо", value=record_data['ржкрж┐рждрж╛рж░_ржирж╛ржо'])

        with col2:
            edited_data['ржорж╛рждрж╛рж░_ржирж╛ржо'] = st.text_input("ржорж╛рждрж╛рж░ ржирж╛ржо", value=record_data['ржорж╛рждрж╛рж░_ржирж╛ржо'])
            edited_data['ржкрзЗрж╢рж╛'] = st.text_input("ржкрзЗрж╢рж╛", value=record_data['ржкрзЗрж╢рж╛'])
            edited_data['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ'] = st.text_input("ржЬржирзНржо рждрж╛рж░рж┐ржЦ", value=record_data['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ'])
            edited_data['ржарж┐ржХрж╛ржирж╛'] = st.text_input("ржарж┐ржХрж╛ржирж╛", value=record_data['ржарж┐ржХрж╛ржирж╛'])

        submit = st.form_submit_button("ЁЯТ╛ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи")
        if submit:
            try:
                if st.session_state.storage.update_record(record_id, edited_data):
                    st.success("тЬЕ рж░рзЗржХрж░рзНржб рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
                    st.balloons()
                    return True
                else:
                    st.error("тЭМ рж░рзЗржХрж░рзНржб ржЖржкржбрзЗржЯ ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐")
            except Exception as e:
                st.error(f"тЭМ ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")
    st.markdown("</div>", unsafe_allow_html=True)
    return False

def display_record_card(record, record_id):
    """Display a single record in a card format"""
    st.markdown(f"""
    <div class='record-card'>
        <h4>ЁЯкк {record['ржирж╛ржо']}</h4>
        <p><strong>ржХрзНрж░ржорж┐ржХ ржиржВ:</strong> {record['ржХрзНрж░ржорж┐ржХ_ржиржВ']}</p>
        <p><strong>ржнрзЛржЯрж╛рж░ ржиржВ:</strong> {record['ржнрзЛржЯрж╛рж░_ржиржВ']}</p>
        <p><strong>ржкрж┐рждрж╛рж░ ржирж╛ржо:</strong> {record['ржкрж┐рждрж╛рж░_ржирж╛ржо']}</p>
        <p><strong>ржорж╛рждрж╛рж░ ржирж╛ржо:</strong> {record['ржорж╛рждрж╛рж░_ржирж╛ржо']}</p>
        <p><strong>ржкрзЗрж╢рж╛:</strong> {record['ржкрзЗрж╢рж╛']}</p>
        <p><strong>ржЬржирзНржо рждрж╛рж░рж┐ржЦ:</strong> {record['ржЬржирзНржо_рждрж╛рж░рж┐ржЦ']}</p>
        <p><strong>ржарж┐ржХрж╛ржирж╛:</strong> {record['ржарж┐ржХрж╛ржирж╛']}</p>
    </div>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        if st.button("тЬПя╕П рж╕ржорзНржкрж╛ржжржирж╛", key=f"edit_{record_id}"):
            st.session_state.editing = record_id

    with col2:
        if st.button("ЁЯЧСя╕П ржорзБржЫрзБржи", key=f"delete_{record_id}"):
            # Add confirmation dialog
            st.warning("ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ ржПржЗ рж░рзЗржХрж░рзНржбржЯрж┐ ржорзБржЫрждрзЗ ржЪрж╛ржи?")
            if st.button("рж╣рзНржпрж╛ржБ, ржорзБржЫрзЗ ржлрзЗрж▓рзБржи", key=f"confirm_delete_{record_id}"):
                try:
                    if st.session_state.storage.delete_record(record_id):
                        st.success("тЬЕ рж░рзЗржХрж░рзНржб ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
                        st.rerun()
                    else:
                        st.error("тЭМ рж░рзЗржХрж░рзНржб ржорзБржЫрзЗ ржлрзЗрж▓рж╛ ржпрж╛ржпрж╝ржирж┐")
                except Exception as e:
                    st.error(f"тЭМ рж░рзЗржХрж░рзНржб ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ рж╕ржоржпрж╝ рж╕ржорж╕рзНржпрж╛: {str(e)}")

    # Show edit form if this record is being edited
    if st.session_state.editing == record_id:
        if edit_record(record_id, record):
            st.session_state.editing = None
            st.rerun()

def show_all_data_page():
    st.header("ЁЯУЛ рж╕ржВрж░ржХрзНрж╖рж┐ржд рж╕ржХрж▓ рждржерзНржп")

    # Add delete all button with confirmation
    if 'confirm_delete' not in st.session_state:
        st.session_state.confirm_delete = False

    col1, col2 = st.columns([1, 3])
    with col1:
        if st.button("ЁЯЧСя╕П рж╕ржм ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рзБржи", key="delete_all"):
            st.session_state.confirm_delete = True

    if st.session_state.confirm_delete:
        st.warning("""
        тЪая╕П рж╕рждрж░рзНржХрждрж╛!
        ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ рж╕ржорж╕рзНржд ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рждрзЗ ржЪрж╛ржи?
        """)

        confirm_col1, confirm_col2 = st.columns([1, 3])
        with confirm_col1:
            if st.button("рж╣рзНржпрж╛ржБ, ржорзБржЫрзЗ ржлрзЗрж▓рзБржи", key="confirm_delete_final"):
                try:
                    st.session_state.storage.delete_all_records()
                    st.success("тЬЕ рж╕ржм ржбрзЗржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
                    st.session_state.confirm_delete = False
                    st.rerun()
                except Exception as e:
                    st.error(f"тЭМ ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛рж░ рж╕ржоржпрж╝ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}")

            if st.button("ржирж╛, ржмрж╛рждрж┐рж▓ ржХрж░рзБржи", key="cancel_delete"):
                st.session_state.confirm_delete = False
                st.rerun()

    files = st.session_state.storage.get_file_names()

    if not files:
        st.info("тЭМ ржХрзЛржи ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб ржХрж░рж╛ рж╣ржпрж╝ржирж┐")
        return

    selected_file = st.selectbox("ЁЯУБ ржлрж╛ржЗрж▓ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи", files)

    if selected_file:
        with st.spinner('рждржерзНржп рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...'):
            records = st.session_state.storage.get_file_data(selected_file)
            if records:
                df = pd.DataFrame(records)
                st.dataframe(df, use_container_width=True)
            else:
                st.info("тЭМ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржлрж╛ржЗрж▓рзЗ ржХрзЛржи рждржерзНржп ржирзЗржЗ")

def main():
    st.title("ЁЯУЪ ржмрж╛ржВрж▓рж╛ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржи")

    # Sidebar navigation with icons
    page = st.sidebar.radio(
        "ЁЯУС ржкрзГрж╖рзНржарж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        ["ЁЯУд ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб", "ЁЯФН ржЕржирзБрж╕ржирзНржзрж╛ржи", "ЁЯУЛ рж╕ржХрж▓ рждржерзНржп"]
    )

    if "ЁЯУд ржлрж╛ржЗрж▓ ржЖржкрж▓рзЛржб" in page:
        show_upload_page()
    elif "ЁЯФН ржЕржирзБрж╕ржирзНржзрж╛ржи" in page:
        show_search_page()
    else:
        show_all_data_page()

def show_search_page():
    st.header("ЁЯФН ржЙржирзНржиржд ржЕржирзБрж╕ржирзНржзрж╛ржи")

    # Create two columns for search fields
    col1, col2 = st.columns(2)

    with col1:
        si_number = st.text_input("ЁЯФв ржХрзНрж░ржорж┐ржХ ржиржВ")
        name = st.text_input("ЁЯСд ржирж╛ржо")
        father_name = st.text_input("ЁЯСи ржкрж┐рждрж╛рж░ ржирж╛ржо")
        mother_name = st.text_input("ЁЯСй ржорж╛рждрж╛рж░ ржирж╛ржо")

    with col2:
        voter_id = st.text_input("ЁЯЧ│я╕П ржнрзЛржЯрж╛рж░ ржиржВ")
        occupation = st.text_input("ЁЯТ╝ ржкрзЗрж╢рж╛")
        address = st.text_input("ЁЯПа ржарж┐ржХрж╛ржирж╛")
        dob = st.text_input("ЁЯУЕ ржЬржирзНржо рждрж╛рж░рж┐ржЦ")

    if st.button("ЁЯФН ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи", key="search"):
        with st.spinner('ржЕржирзБрж╕ржирзНржзрж╛ржи ржЪрж▓ржЫрзЗ...'):
            results = st.session_state.storage.search_records(
                ржХрзНрж░ржорж┐ржХ_ржиржВ=si_number,
                ржирж╛ржо=name,
                ржнрзЛржЯрж╛рж░_ржиржВ=voter_id,
                ржкрж┐рждрж╛рж░_ржирж╛ржо=father_name,
                ржорж╛рждрж╛рж░_ржирж╛ржо=mother_name,
                ржкрзЗрж╢рж╛=occupation,
                ржарж┐ржХрж╛ржирж╛=address,
                ржЬржирзНржо_рждрж╛рж░рж┐ржЦ=dob
            )

            if results:
                st.write(f"ЁЯУК ржорзЛржЯ {len(results)} ржЯрж┐ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ:")

                # Show results in card format
                for record in results:
                    record_id = record.pop('id')  # Remove id from display but keep for operations
                    display_record_card(record, record_id)
            else:
                st.info("тЭМ ржХрзЛржи ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")

# Set page configuration
st.set_page_config(
    page_title="ржмрж╛ржВрж▓рж╛ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ",
    page_icon="ЁЯУЭ",
    layout="wide"
)

# Custom CSS
st.markdown("""
<style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
        border-radius: 5px;
        height: 3em;
        background-color: #f63366;
        color: white;
    }
    .stTextInput>div>div>input {
        border-radius: 5px;
        font-family: 'SolaimanLipi', Arial, sans-serif !important;
    }
    h1 {
        color: #1E1E1E;
        padding-bottom: 2rem;
    }
    h2 {
        color: #2E2E2E;
        padding-bottom: 1rem;
    }
    .stProgress > div > div > div > div {
        background-color: #f63366;
    }
    .upload-stats {
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .record-card {
        background-color: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    }
    .delete-button {
        background-color: #dc3545;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }
    .edit-button {
        background-color: #28a745;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }
    .edit-form {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .confirm-delete {
        background-color: #fff3f3;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #dc3545;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Add Bangla font support
st.markdown("""
<style>
@font-face {
    font-family: 'SolaimanLipi';
    src: url('https://cdn.jsdelivr.net/gh/maateen/bangla-web-fonts/fonts/SolaimanLipi/SolaimanLipi.ttf') format('truetype');
}
* {
    font-family: 'SolaimanLipi', Arial, sans-serif !important;
}
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'storage' not in st.session_state:
    st.session_state.storage = Storage()

if __name__ == "__main__":
    main()